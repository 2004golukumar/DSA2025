class Solution {
  public:
  // Function to find the first occurrence of value
int findFirstOccurrence(const vector<int>& nums, int value) {
    int left = 0, right = nums.size() - 1, ans = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] >= value) {
            if (nums[mid] == value) ans = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return ans;
}

// Function to find the last occurrence of value
int findLastOccurrence(const vector<int>& nums, int value) {
    int left = 0, right = nums.size() - 1, ans = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] <= value) {
            if (nums[mid] == value) ans = mid;
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return ans;
}

// Function to count the number of occurrences of value
int countFreq(const vector<int>& nums, int value) {
    int first = findFirstOccurrence(nums, value);
    if (first == -1) return 0; // Value not found
    int last = findLastOccurrence(nums, value);
    return last - first + 1;
}
};
    
